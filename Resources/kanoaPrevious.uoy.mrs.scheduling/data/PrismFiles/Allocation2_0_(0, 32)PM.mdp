mdp

formula done = (r5_order=2 & r1_order=6);

// failure
formula fail = (r5_fail=0 & r1_fail=0 );

// total time available
const int TT=100;

// completion tasks time
const int r5at4_notify_0Time=4;
const int r1at3_sanit_2Time=4;
const int r1at4_notify_3Time=4;
const int r1at2_floor_4Time=6;
const int r1at2_floor_1Time=6;
const int r1at3_sanit_5Time=4;

// probabilities of succeeding with a task
const double pr5_Succ_at1_move = 0.8;
const double pr5_Succ_at4_notify = 0.7;
const double pr1_Succ_at2_floor = 0.9;
const double pr1_Succ_at3_sanit = 0.9;
const double pr1_Succ_at4_notify = 0.9;

// travelling costs of each robot
const int r5_travDist = 9; //l2->room3
const int r1_travDist = 24; //l1->room3->room5->room5->room3->room5

// tasks to track for ordering constraints
//const int at2_floor_4 = 0;
//const int at2_floor_1 = 0;
//const int at4_notify_0 = 0;
//const int at3_sanit_2 = 0;
//const int at4_notify_3 = 0;
//const int at3_sanit_5 = 0;


//---------- Robot r5 MODULE----------
module r5
  //r5_order=0: travel cost 
  //r5_order=1: task at4_notify_0
  r5_order: [0..2] init 0; // execution order
  r5_time:[0..TT] init 0; //time available
  r5_travel: [0..1] init 0; // get travelling reward
  r5_fail: [0..1] init 0; // failure detected

  // tasks to track for ordering constraints
  at4_notify_0:[0..1];

  // travel captured as a reward
  [r5travel] r5_order=0 -> (r5_order'=1);
  // do sequence of tasks
  [ ] r5_order=1 & r5_fail=0 & (r5_time+ r5at4_notify_0Time + 9 <=TT) -> (pr5_Succ_at4_notify): (r5_order'=2) & (r5_time'= r5_time+ r5at4_notify_0Time + 9) & (at4_notify_0'=1)+ (1-pr5_Succ_at4_notify): (r5_fail'=1) & (r5_order'=2) & (r5_time'= r5_time+ r5at4_notify_0Time + 9) & (at4_notify_0'=1);

  // failure and recovery
  [ ] r5_fail=1 -> (r5_fail'=0); // fail
  [r5idle] r5_order!=2 & r5_fail=0 & (r5_time+1<=TT) -> (r5_time'=r5_time+1); // idle
endmodule


//---------- Robot r1 MODULE----------
module r1
  //r1_order=0: travel cost 
  //r1_order=1: task at3_sanit_2
  //r1_order=2: task at4_notify_3
  //r1_order=3: task at2_floor_4
  //r1_order=4: task at2_floor_1
  //r1_order=5: task at3_sanit_5
  r1_order: [0..6] init 0; // execution order
  r1_time:[0..TT] init 0; //time available
  r1_travel: [0..1] init 0; // get travelling reward
  r1_fail: [0..1] init 0; // failure detected

  // tasks to track for ordering constraints
  at3_sanit_2:[0..1];
  at4_notify_3:[0..1];
  at2_floor_4:[0..1];
  at2_floor_1:[0..1];
  at3_sanit_5:[0..1];

  // travel captured as a reward
  [r1travel] r1_order=0 -> (r1_order'=1);
  // do sequence of tasks
  [ ] r1_order=1 & r1_fail=0 & at4_notify_0=1 & r1_time>=r5_time & (r1_time+ r1at3_sanit_2Time + 3 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=2) & (r1_time'= r1_time+ r1at3_sanit_2Time + 3) & (at3_sanit_2'=1)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=2) & (r1_time'= r1_time+ r1at3_sanit_2Time + 3) & (at3_sanit_2'=1);
  [ ] r1_order=2 & r1_fail=0 & (r1_time+ r1at4_notify_3Time + 7 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=3) & (r1_time'= r1_time+ r1at4_notify_3Time + 7) & (at4_notify_3'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=3) & (r1_time'= r1_time+ r1at4_notify_3Time + 7) & (at4_notify_3'=1);
  [ ] r1_order=3 & r1_fail=0 & at3_sanit_5=1 & at4_notify_3=1 & (r1_time+ r1at2_floor_4Time + 0 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_4Time + 0) & (at2_floor_4'=1)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_4Time + 0) & (at2_floor_4'=1);
  [ ] r1_order=4 & r1_fail=0 & at3_sanit_2=1 & at4_notify_0=1 & (r1_time+ r1at2_floor_1Time + 7 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=5) & (r1_time'= r1_time+ r1at2_floor_1Time + 7) & (at2_floor_1'=1)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=5) & (r1_time'= r1_time+ r1at2_floor_1Time + 7) & (at2_floor_1'=1);
  [ ] r1_order=5 & r1_fail=0 & at4_notify_3=1 & (r1_time+ r1at3_sanit_5Time + 7 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=6) & (r1_time'= r1_time+ r1at3_sanit_5Time + 7) & (at3_sanit_5'=1)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=6) & (r1_time'= r1_time+ r1at3_sanit_5Time + 7) & (at3_sanit_5'=1);

  // failure and recovery
  [ ] r1_fail=1 -> (r1_fail'=0); // fail
  [r1idle] r1_order!=6 & r1_fail=0 & (r1_time+1<=TT) -> (r1_time'=r1_time+1); // idle
endmodule

rewards "travel" 
 [r5travel] true: r5_travDist;
 [r1travel] true: r1_travDist;
endrewards
rewards "idle" 
 [r5idle] true: 1;
 [r1idle] true: 1;
endrewards

//total time and prob:
//33//0.40824