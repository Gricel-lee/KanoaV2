mdp

formula done = (r5_order=5 & r1_order=5);

// failure
formula fail = (r5_fail=0 & r1_fail=0 );

// total time available
const int TT=51;

// completion tasks time
const int r5at1_move_0Time=2;
const int r5at1_move_1Time=2;
const int r1at1_move_0Time=2;
const int r1at1_move_1Time=2;

// probabilities of succeeding with a task
const double pr5_Succ_at1_move = 0.8;
const double pr5_Succ_at4_notify = 0.7;
const double pr1_Succ_at1_move = 0.8;
const double pr1_Succ_at4_notify = 0.7;

// travelling costs of each robot
const int r5_travDist = 9; //l2->room5->room3
const int r1_travDist = 9; //l2->room5->room3

// tasks to track for ordering constraints


//---------- Robot r5 MODULE----------
module r5
  //r5_order=0: travel cost 
  //r5_order=1: time travel to join task at1_move_1
  //r5_order=2: join task at1_move_1
  //r5_order=3: time travel to join task at1_move_0
  //r5_order=4: join task at1_move_0
  r5_order: [0..5] init 0; // execution order
  r5_time:[0..TT] init 0; //time available
  r5_travel: [0..1] init 0; // get travelling reward
  r5_fail: [0..1] init 0; // failure detected

  // travel captured as a reward
  [r5travel] r5_order=0 -> (r5_order'=1);
  // do sequence of tasks
  [ ] r5_order=1 & r5_fail=0 & (r5_time+2<=TT) -> (pr5_Succ_at1_move): (r5_order'=2) & (r5_time'= r5_time+2)+ (1-pr5_Succ_at1_move): (r5_fail'=1) & (r5_order'=2) & (r5_time'= r5_time+2); // travel to join task at1_move_1
  [at1_move_1] r5_order=2 & r5_fail=0 & (r5_time+r5at1_move_1Time<=TT) & r5_time=r1_time -> (r5_order'=3) & (r5_time'= r5_time + r5at1_move_1Time);
  [ ] r5_order=3 & r5_fail=0 & (r5_time+7<=TT) -> (pr5_Succ_at1_move): (r5_order'=4) & (r5_time'= r5_time+7)+ (1-pr5_Succ_at1_move): (r5_fail'=1) & (r5_order'=4) & (r5_time'= r5_time+7); // travel to join task at1_move_0
  [at1_move_0] r5_order=4 & r5_fail=0 & (r5_time+r5at1_move_0Time<=TT) & r5_time=r1_time -> (r5_order'=5) & (r5_time'= r5_time + r5at1_move_0Time);

  // failure and recovery
  [ ] r5_fail=1 -> (r5_fail'=0); // fail
  [r5idle] r5_order!=5 & r5_fail=0 & (r5_time+1<=TT) -> (r5_time'=r5_time+1); // idle
endmodule


//---------- Robot r1 MODULE----------
module r1
  //r1_order=0: travel cost 
  //r1_order=1: time travel to join task at1_move_1
  //r1_order=2: join task at1_move_1
  //r1_order=3: time travel to join task at1_move_0
  //r1_order=4: join task at1_move_0
  r1_order: [0..5] init 0; // execution order
  r1_time:[0..TT] init 0; //time available
  r1_travel: [0..1] init 0; // get travelling reward
  r1_fail: [0..1] init 0; // failure detected

  // travel captured as a reward
  [r1travel] r1_order=0 -> (r1_order'=1);
  // do sequence of tasks
  [ ] r1_order=1 & r1_fail=0 & (r1_time+2<=TT) -> (pr1_Succ_at1_move): (r1_order'=2) & (r1_time'= r1_time+2)+ (1-pr1_Succ_at1_move): (r1_fail'=1) & (r1_order'=2) & (r1_time'= r1_time+2); // travel to join task at1_move_1
  [at1_move_1] r1_order=2 & r1_fail=0 & (r1_time+r1at1_move_1Time<=TT) & r1_time=r5_time -> (r1_order'=3) & (r1_time'= r1_time + r1at1_move_1Time);
  [ ] r1_order=3 & r1_fail=0 & (r1_time+7<=TT) -> (pr1_Succ_at1_move): (r1_order'=4) & (r1_time'= r1_time+7)+ (1-pr1_Succ_at1_move): (r1_fail'=1) & (r1_order'=4) & (r1_time'= r1_time+7); // travel to join task at1_move_0
  [at1_move_0] r1_order=4 & r1_fail=0 & (r1_time+r1at1_move_0Time<=TT) & r1_time=r5_time -> (r1_order'=5) & (r1_time'= r1_time + r1at1_move_0Time);

  // failure and recovery
  [ ] r1_fail=1 -> (r1_fail'=0); // fail
  [r1idle] r1_order!=5 & r1_fail=0 & (r1_time+1<=TT) -> (r1_time'=r1_time+1); // idle
endmodule

rewards "travel" 
 [r5travel] true: r5_travDist;
 [r1travel] true: r1_travDist;
endrewards
rewards "idle" 
 [r5idle] true: 1;
 [r1idle] true: 1;
endrewards