mdp

formula done = (r1_order=13);

// success
formula success = (r1_fail=0 );

// total time available
const int TT=100;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r1at4_notify_11Time=4;
const int r1at4_notify_2Time=4;
const int r1at2_floor_3Time=5;
const int r1at4_notify_8Time=4;
const int r1at2_floor_9Time=5;
const int r1at2_floor_12Time=5;
const int r1at4_notify_5Time=4;
const int r1at3_sanit_10Time=4;
const int r1at3_sanit_13Time=4;
const int r1at3_sanit_4Time=4;
const int r1at3_sanit_7Time=4;
const int r1at2_floor_6Time=5;

// probabilities of succeeding with a task
const double pr1_Succ_at4_notify = 0.9;
const double pr1_Succ_at2_floor = 0.9;
const double pr1_Succ_at3_sanit = 0.9;

// travelling costs of each robot
const int r1_travDist = 28; //l7->room5->room2->room2->room4->room4->room5->room3->room4->room5->room2->room3->room3


//---------- Robot r1 MODULE----------
module r1
  //r1_order=0: travel cost 
  //r1_order=1: task at4_notify_11
  //r1_order=2: task at4_notify_2
  //r1_order=3: task at2_floor_3
  //r1_order=4: task at4_notify_8
  //r1_order=5: task at2_floor_9
  //r1_order=6: task at2_floor_12
  //r1_order=7: task at4_notify_5
  //r1_order=8: task at3_sanit_10
  //r1_order=9: task at3_sanit_13
  //r1_order=10: task at3_sanit_4
  //r1_order=11: task at3_sanit_7
  //r1_order=12: task at2_floor_6
  r1_order: [0..13] init 0; // execution order
  r1_time:[0..TT] init 0; //time available
  r1_travel: [0..1] init 0; // get travelling reward
  r1_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r1 : [0..TT];

  // tasks to track for ordering constraints
  at4_notify_11:[0..1];
  at4_notify_2:[0..1];
  at4_notify_8:[0..1];
  at4_notify_5:[0..1];

  // travel captured as a reward
  [r1travel] r1_order=0 -> (r1_order'=1);
  // do sequence of tasks
  [Tat4_notify_11r1] r1_order=1 & r1_fail=0 & (r1_time+ r1at4_notify_11Time + 12 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=2) & (r1_time'= r1_time+ r1at4_notify_11Time + 12) & (at4_notify_11'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=2) & (r1_time'= r1_time+ r1at4_notify_11Time + 12) & (at4_notify_11'=1);
  [Tat4_notify_2r1] r1_order=2 & r1_fail=0 & (r1_time+ r1at4_notify_2Time + 2 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=3) & (r1_time'= r1_time+ r1at4_notify_2Time + 2) & (at4_notify_2'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=3) & (r1_time'= r1_time+ r1at4_notify_2Time + 2) & (at4_notify_2'=1);
  [Tr1at2_floor_3] r1_order=3 & r1_fail=0 & at4_notify_2=1 & (r1_time+ r1at2_floor_3Time + 0 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_3Time + 0)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_3Time + 0);
  [Tat4_notify_8r1] r1_order=4 & r1_fail=0 & (r1_time+ r1at4_notify_8Time + 2 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=5) & (r1_time'= r1_time+ r1at4_notify_8Time + 2) & (at4_notify_8'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=5) & (r1_time'= r1_time+ r1at4_notify_8Time + 2) & (at4_notify_8'=1);
  [Tr1at2_floor_9] r1_order=5 & r1_fail=0 & at4_notify_8=1 & (r1_time+ r1at2_floor_9Time + 0 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=6) & (r1_time'= r1_time+ r1at2_floor_9Time + 0)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=6) & (r1_time'= r1_time+ r1at2_floor_9Time + 0);
  [Tr1at2_floor_12] r1_order=6 & r1_fail=0 & at4_notify_11=1 & (r1_time+ r1at2_floor_12Time + 2 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=7) & (r1_time'= r1_time+ r1at2_floor_12Time + 2)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=7) & (r1_time'= r1_time+ r1at2_floor_12Time + 2);
  [Tat4_notify_5r1] r1_order=7 & r1_fail=0 & (r1_time+ r1at4_notify_5Time + 2 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=8) & (r1_time'= r1_time+ r1at4_notify_5Time + 2) & (at4_notify_5'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=8) & (r1_time'= r1_time+ r1at4_notify_5Time + 2) & (at4_notify_5'=1);
  [Tr1at3_sanit_10] r1_order=8 & r1_fail=0 & at4_notify_8=1 & (r1_time+ r1at3_sanit_10Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=9) & (r1_time'= r1_time+ r1at3_sanit_10Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=9) & (r1_time'= r1_time+ r1at3_sanit_10Time + 2);
  [Tr1at3_sanit_13] r1_order=9 & r1_fail=0 & at4_notify_11=1 & (r1_time+ r1at3_sanit_13Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=10) & (r1_time'= r1_time+ r1at3_sanit_13Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=10) & (r1_time'= r1_time+ r1at3_sanit_13Time + 2);
  [Tr1at3_sanit_4] r1_order=10 & r1_fail=0 & at4_notify_2=1 & (r1_time+ r1at3_sanit_4Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=11) & (r1_time'= r1_time+ r1at3_sanit_4Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=11) & (r1_time'= r1_time+ r1at3_sanit_4Time + 2);
  [Tr1at3_sanit_7] r1_order=11 & r1_fail=0 & at4_notify_5=1 & (r1_time+ r1at3_sanit_7Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=12) & (r1_time'= r1_time+ r1at3_sanit_7Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=12) & (r1_time'= r1_time+ r1at3_sanit_7Time + 2);
  [Tr1at2_floor_6] r1_order=12 & r1_fail=0 & at4_notify_5=1 & (r1_time+ r1at2_floor_6Time + 0 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=13) & (r1_time'= r1_time+ r1at2_floor_6Time + 0)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=13) & (r1_time'= r1_time+ r1at2_floor_6Time + 0);

  // failure and recovery, idle
  [ ] r1_fail=1 -> (r1_fail'=0); // fail
  [r1idle] r1_order!=13 & r1_fail=0 & (r1_time+1<=TT) & (i_r1<maxIdle) -> (i_r1'=i_r1+1) & (r1_time'=r1_time+1); // idle
endmodule

rewards "travel" 
 [r1travel] true: r1_travDist;
endrewards
rewards "idle" 
 [r1idle] true: 1;
endrewards

//total travel:
//28//