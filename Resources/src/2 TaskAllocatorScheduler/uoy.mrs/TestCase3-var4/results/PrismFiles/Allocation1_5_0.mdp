mdp

formula done = (r5_order=5 & r4_order=5);

// success
formula success = (r5_fail=0 & r4_fail=0 );

// total time available
const int TT=100;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r5at1_move_0Time=5;
const int r5at1_move_1Time=5;
const int r4at1_move_0Time=4;
const int r4at1_move_1Time=4;

// probabilities of succeeding with a task
const double pr5_Succ_at1_move = 0.8;
const double pr4_Succ_at1_move = 0.9;

// travelling costs of each robot
const int r5_travDist = 11; //l11->room1->room6
const int r4_travDist = 10; //l10->room1->room6


//---------- Robot r5 MODULE----------
module r5
  //r5_order=0: travel cost 
  //r5_order=1: time travel to join task at1_move_0
  //r5_order=2: join task at1_move_0
  //r5_order=3: time travel to join task at1_move_1
  //r5_order=4: join task at1_move_1
  r5_order: [0..5] init 0; // execution order
  r5_time:[0..TT] init 0; //time available
  r5_travel: [0..1] init 0; // get travelling reward
  r5_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r5 : [0..TT];

  // travel captured as a reward
  [r5travel] r5_order=0 -> (r5_order'=1);
  // do sequence of tasks
  [ ] r5_order=1 & r5_fail=0 & (r5_time+9<=TT) -> (pr5_Succ_at1_move): (r5_order'=2) & (r5_time'= r5_time+9)+ (1-pr5_Succ_at1_move): (r5_fail'=1) & (r5_order'=2) & (r5_time'= r5_time+9); // travel to join task at1_move_0
  [at1_move_0] r5_order=2 & r5_fail=0 & (r5_time+r5at1_move_0Time<=TT) & r5_time=r4_time -> (r5_order'=3) & (r5_time'= r5_time + r5at1_move_0Time);
  [ ] r5_order=3 & r5_fail=0 & (r5_time+2<=TT) -> (pr5_Succ_at1_move): (r5_order'=4) & (r5_time'= r5_time+2)+ (1-pr5_Succ_at1_move): (r5_fail'=1) & (r5_order'=4) & (r5_time'= r5_time+2); // travel to join task at1_move_1
  [at1_move_1] r5_order=4 & r5_fail=0 & (r5_time+r5at1_move_1Time<=TT) & r5_time=r4_time -> (r5_order'=5) & (r5_time'= r5_time + r5at1_move_1Time);

  // failure and recovery, idle
  [ ] r5_fail=1 -> (r5_fail'=0); // fail
  [r5idle] r5_order!=5 & r5_fail=0 & (r5_time+1<=TT) & (i_r5<maxIdle) -> (i_r5'=i_r5+1) & (r5_time'=r5_time+1); // idle
endmodule


//---------- Robot r4 MODULE----------
module r4
  //r4_order=0: travel cost 
  //r4_order=1: time travel to join task at1_move_0
  //r4_order=2: join task at1_move_0
  //r4_order=3: time travel to join task at1_move_1
  //r4_order=4: join task at1_move_1
  r4_order: [0..5] init 0; // execution order
  r4_time:[0..TT] init 0; //time available
  r4_travel: [0..1] init 0; // get travelling reward
  r4_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r4 : [0..TT];

  // travel captured as a reward
  [r4travel] r4_order=0 -> (r4_order'=1);
  // do sequence of tasks
  [ ] r4_order=1 & r4_fail=0 & (r4_time+8<=TT) -> (pr4_Succ_at1_move): (r4_order'=2) & (r4_time'= r4_time+8)+ (1-pr4_Succ_at1_move): (r4_fail'=1) & (r4_order'=2) & (r4_time'= r4_time+8); // travel to join task at1_move_0
  [at1_move_0] r4_order=2 & r4_fail=0 & (r4_time+r4at1_move_0Time<=TT) & r4_time=r5_time -> (r4_order'=3) & (r4_time'= r4_time + r4at1_move_0Time);
  [ ] r4_order=3 & r4_fail=0 & (r4_time+2<=TT) -> (pr4_Succ_at1_move): (r4_order'=4) & (r4_time'= r4_time+2)+ (1-pr4_Succ_at1_move): (r4_fail'=1) & (r4_order'=4) & (r4_time'= r4_time+2); // travel to join task at1_move_1
  [at1_move_1] r4_order=4 & r4_fail=0 & (r4_time+r4at1_move_1Time<=TT) & r4_time=r5_time -> (r4_order'=5) & (r4_time'= r4_time + r4at1_move_1Time);

  // failure and recovery, idle
  [ ] r4_fail=1 -> (r4_fail'=0); // fail
  [r4idle] r4_order!=5 & r4_fail=0 & (r4_time+1<=TT) & (i_r4<maxIdle) -> (i_r4'=i_r4+1) & (r4_time'=r4_time+1); // idle
endmodule

rewards "travel" 
 [r5travel] true: r5_travDist;
 [r4travel] true: r4_travDist;
endrewards
rewards "idle" 
 [r5idle] true: 1;
 [r4idle] true: 1;
endrewards

//total travel:
//21//