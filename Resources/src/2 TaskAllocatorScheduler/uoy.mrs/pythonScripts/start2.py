import os
from classes.problemSpecification import ProblemSpecification
from classes.allocation import Allocation
import get_unique_alloc
from auxiliary import utility


###  PART 1 - Clustering

def startClustering():
    '''
    Get probabilistic models in Prism language for each cluster of robots (under transitive closure)
    in each alloy task allocation file (generated by Alloy) 
    Inputs:
    1) sys.argv[1] = Constants.ALLOYOUTPUT_DIR  - path to Alloy output files
    2) sys.argv[2] = Constants.MISSIONSTREEFILE - .txt file with dataframe info 
    3) sys.argv[3] = Constants.DSLFILE          - specifications of the system in DSL
    4) sys.argv[4] = Constants.TRANSITIVECLOSURE_DIR    - save TC models here
    5) sys.argv[5] = Constants.EVOOUTPUT_DIR     - save evoChecker models here
    6) sys.argv[6] = Constants.TOTALTIME4PLAN
    7) If "save_data" is True, it saves data about the alloy allocation model
    and the cluster of robots from the  transitive closure.
    8) sys.argv[8] = Constants.WORLDTXTFILE      - file generated with paths and robots loc.
    
    Through out this code, we refer to:
    - a problem specification as "p"
    - an allocation as "a"
    - a cluster as "c"
    
    '''
    
    # 1) Get inputs from Java
    p = ProblemSpecification() # includes robots' instantiation and world model
    print("- Unique allocations found and robot clusters:")
    
    # 2) Create necessary folders and clean Java input
    utility.flush_sys_streams() # delete input stream
    utility.create_folder_if_not_exist(p.path_tc)
    
    
    allocations = []
    
    # 3) For each Alloy allocation:
    for fileAlloy in p.getalloyFileswPath(): # for each file, create probabilistic model(s)
        ''' Get allocations'''
        # 3.1) Create allocation object, get Transitive Closure (TC) clusters + allocation info, including its clusters of robots (by transitive closure)
        
        a = Allocation(p,fileAlloy)
        
        # 3.3) get unique allocations //sometime Alloy gives two SAME allocations
        p,isUniqueAlloc = get_unique_alloc.GetUniqueAlloc(p,a)
        
        if isUniqueAlloc:
            allocations.append(a)
            # save Transitive Closure
            a.saveAllocation_n_TCInfo(p.getTransClosurePath())
            # print info
            print(a.num ," cluster(s):", a.robotclusters)
        else:
            if os.path.exists(a.fileAlloy):
                os.remove(a.fileAlloy)
            else:
                print("Repeated Allocation file does not exist: "+ a.fileAlloy)
            
    # 4) Save info
    p.saveAllocInfo() # save repository info
    p.saveDSLTasksInfo() #repo.safeAllocationsRepo(p.uniqueClusterAlloc,p.saveData(),p.getTransClosurePath())
    
    p.saveUniqueallocations(allocations)



# ------------MAIN--------------------
startClustering()