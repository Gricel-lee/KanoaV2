mdp

formula done = (r4_order=12 & r3_order=2);

// success
formula success = (r4_fail=0 & r3_fail=0 );

// total time available
const int TT=100;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r4at4_notify_5Time=1;
const int r4at4_notify_11Time=1;
const int r4at4_notify_8Time=1;
const int r4at3_sanit_7Time=4;
const int r4at4_notify_2Time=1;
const int r4at2_floor_6Time=5;
const int r4at2_floor_12Time=5;
const int r4at3_sanit_13Time=4;
const int r4at2_floor_3Time=5;
const int r4at3_sanit_10Time=4;
const int r4at2_floor_9Time=5;
const int r3at3_sanit_4Time=4;

// probabilities of succeeding with a task
const double pr4_Succ_at4_notify = 0.99;
const double pr4_Succ_at3_sanit = 0.99;
const double pr4_Succ_at2_floor = 0.99;
const double pr3_Succ_at3_sanit = 0.99;

// travelling costs of each robot
const int r4_travDist = 98; //l10->room3->room5->room4->room3->room2->room3->room5->room5->room2->room4->room4
const int r3_travDist = 13; //l9->room2


//---------- Robot r4 MODULE----------
module r4
  //r4_order=0: travel cost 
  //r4_order=1: task at4_notify_5
  //r4_order=2: task at4_notify_11
  //r4_order=3: task at4_notify_8
  //r4_order=4: task at3_sanit_7
  //r4_order=5: task at4_notify_2
  //r4_order=6: task at2_floor_6
  //r4_order=7: task at2_floor_12
  //r4_order=8: task at3_sanit_13
  //r4_order=9: task at2_floor_3
  //r4_order=10: task at3_sanit_10
  //r4_order=11: task at2_floor_9
  r4_order: [0..12] init 0; // execution order
  r4_time:[0..TT] init 0; //time available
  r4_travel: [0..1] init 0; // get travelling reward
  r4_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r4 : [0..TT];

  // tasks to track for ordering constraints
  at4_notify_5:[0..1];
  at4_notify_11:[0..1];
  at4_notify_8:[0..1];
  at4_notify_2:[0..1];

  // travel captured as a reward
  [r4travel] r4_order=0 -> (r4_order'=1);
  // do sequence of tasks
  [Tat4_notify_5r4] r4_order=1 & r4_fail=0 & (r4_time+ r4at4_notify_5Time + 17 <=TT) -> (pr4_Succ_at4_notify): (r4_order'=2) & (r4_time'= r4_time+ r4at4_notify_5Time + 17) & (at4_notify_5'=1)+ (1-pr4_Succ_at4_notify): (r4_fail'=1) & (r4_order'=2) & (r4_time'= r4_time+ r4at4_notify_5Time + 17) & (at4_notify_5'=1);
  [Tat4_notify_11r4] r4_order=2 & r4_fail=0 & (r4_time+ r4at4_notify_11Time + 15 <=TT) -> (pr4_Succ_at4_notify): (r4_order'=3) & (r4_time'= r4_time+ r4at4_notify_11Time + 15) & (at4_notify_11'=1)+ (1-pr4_Succ_at4_notify): (r4_fail'=1) & (r4_order'=3) & (r4_time'= r4_time+ r4at4_notify_11Time + 15) & (at4_notify_11'=1);
  [Tat4_notify_8r4] r4_order=3 & r4_fail=0 & (r4_time+ r4at4_notify_8Time + 2 <=TT) -> (pr4_Succ_at4_notify): (r4_order'=4) & (r4_time'= r4_time+ r4at4_notify_8Time + 2) & (at4_notify_8'=1)+ (1-pr4_Succ_at4_notify): (r4_fail'=1) & (r4_order'=4) & (r4_time'= r4_time+ r4at4_notify_8Time + 2) & (at4_notify_8'=1);
  [Tr4at3_sanit_7] r4_order=4 & r4_fail=0 & at4_notify_5=1 & (r4_time+ r4at3_sanit_7Time + 16 <=TT) -> (pr4_Succ_at3_sanit): (r4_order'=5) & (r4_time'= r4_time+ r4at3_sanit_7Time + 16)+ (1-pr4_Succ_at3_sanit): (r4_fail'=1) & (r4_order'=5) & (r4_time'= r4_time+ r4at3_sanit_7Time + 16);
  [Tat4_notify_2r4] r4_order=5 & r4_fail=0 & (r4_time+ r4at4_notify_2Time + 2 <=TT) -> (pr4_Succ_at4_notify): (r4_order'=6) & (r4_time'= r4_time+ r4at4_notify_2Time + 2) & (at4_notify_2'=1)+ (1-pr4_Succ_at4_notify): (r4_fail'=1) & (r4_order'=6) & (r4_time'= r4_time+ r4at4_notify_2Time + 2) & (at4_notify_2'=1);
  [Tr4at2_floor_6] r4_order=6 & r4_fail=0 & at4_notify_5=1 & (r4_time+ r4at2_floor_6Time + 2 <=TT) -> (pr4_Succ_at2_floor): (r4_order'=7) & (r4_time'= r4_time+ r4at2_floor_6Time + 2)+ (1-pr4_Succ_at2_floor): (r4_fail'=1) & (r4_order'=7) & (r4_time'= r4_time+ r4at2_floor_6Time + 2);
  [Tr4at2_floor_12] r4_order=7 & r4_fail=0 & at4_notify_11=1 & (r4_time+ r4at2_floor_12Time + 15 <=TT) -> (pr4_Succ_at2_floor): (r4_order'=8) & (r4_time'= r4_time+ r4at2_floor_12Time + 15)+ (1-pr4_Succ_at2_floor): (r4_fail'=1) & (r4_order'=8) & (r4_time'= r4_time+ r4at2_floor_12Time + 15);
  [Tr4at3_sanit_13] r4_order=8 & r4_fail=0 & at4_notify_11=1 & (r4_time+ r4at3_sanit_13Time + 0 <=TT) -> (pr4_Succ_at3_sanit): (r4_order'=9) & (r4_time'= r4_time+ r4at3_sanit_13Time + 0)+ (1-pr4_Succ_at3_sanit): (r4_fail'=1) & (r4_order'=9) & (r4_time'= r4_time+ r4at3_sanit_13Time + 0);
  [Tr4at2_floor_3] r4_order=9 & r4_fail=0 & at4_notify_2=1 & (r4_time+ r4at2_floor_3Time + 15 <=TT) -> (pr4_Succ_at2_floor): (r4_order'=10) & (r4_time'= r4_time+ r4at2_floor_3Time + 15)+ (1-pr4_Succ_at2_floor): (r4_fail'=1) & (r4_order'=10) & (r4_time'= r4_time+ r4at2_floor_3Time + 15);
  [Tr4at3_sanit_10] r4_order=10 & r4_fail=0 & at4_notify_8=1 & (r4_time+ r4at3_sanit_10Time + 14 <=TT) -> (pr4_Succ_at3_sanit): (r4_order'=11) & (r4_time'= r4_time+ r4at3_sanit_10Time + 14)+ (1-pr4_Succ_at3_sanit): (r4_fail'=1) & (r4_order'=11) & (r4_time'= r4_time+ r4at3_sanit_10Time + 14);
  [Tr4at2_floor_9] r4_order=11 & r4_fail=0 & at4_notify_8=1 & (r4_time+ r4at2_floor_9Time + 0 <=TT) -> (pr4_Succ_at2_floor): (r4_order'=12) & (r4_time'= r4_time+ r4at2_floor_9Time + 0)+ (1-pr4_Succ_at2_floor): (r4_fail'=1) & (r4_order'=12) & (r4_time'= r4_time+ r4at2_floor_9Time + 0);

  // failure and recovery, idle
  [ ] r4_fail=1 -> (r4_fail'=0); // fail
  [r4idle] r4_order!=12 & r4_fail=0 & (r4_time+1<=TT) & (i_r4<maxIdle) -> (i_r4'=i_r4+1) & (r4_time'=r4_time+1); // idle
endmodule


//---------- Robot r3 MODULE----------
module r3
  //r3_order=0: travel cost 
  //r3_order=1: task at3_sanit_4
  r3_order: [0..2] init 0; // execution order
  r3_time:[0..TT] init 0; //time available
  r3_travel: [0..1] init 0; // get travelling reward
  r3_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r3 : [0..TT];

  // travel captured as a reward
  [r3travel] r3_order=0 -> (r3_order'=1);
  // do sequence of tasks
  [Tr3at3_sanit_4] r3_order=1 & r3_fail=0 & at4_notify_2=1 & r3_time>=r4_time & (r3_time+ r3at3_sanit_4Time + 13 <=TT) -> (pr3_Succ_at3_sanit): (r3_order'=2) & (r3_time'= r3_time+ r3at3_sanit_4Time + 13)+ (1-pr3_Succ_at3_sanit): (r3_fail'=1) & (r3_order'=2) & (r3_time'= r3_time+ r3at3_sanit_4Time + 13);

  // failure and recovery, idle
  [ ] r3_fail=1 -> (r3_fail'=0); // fail
  [r3idle] r3_order!=2 & r3_fail=0 & (r3_time+1<=TT) & (i_r3<maxIdle) -> (i_r3'=i_r3+1) & (r3_time'=r3_time+1); // idle
endmodule

rewards "travel" 
 [r4travel] true: r4_travDist;
 [r3travel] true: r3_travDist;
endrewards
rewards "idle" 
 [r4idle] true: 1;
 [r3idle] true: 1;
endrewards

//total travel:
//111//