mdp

formula done = (r3_order=4);

// success
formula success = (r3_fail=0 );

// total time available
const int TT=100;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r3at4_notify_2Time=1;
const int r3at3_sanit_4Time=4;
const int r3at2_floor_3Time=5;

// probabilities of succeeding with a task
const double pr3_Succ_at4_notify = 0.99;
const double pr3_Succ_at3_sanit = 0.99;
const double pr3_Succ_at2_floor = 0.99;

// travelling costs of each robot
const int r3_travDist = 13; //l9->room2->room2->room2


//---------- Robot r3 MODULE----------
module r3
  //r3_order=0: travel cost 
  //r3_order=1: task at4_notify_2
  //r3_order=2: task at3_sanit_4
  //r3_order=3: task at2_floor_3
  r3_order: [0..4] init 0; // execution order
  r3_time:[0..TT] init 0; //time available
  r3_travel: [0..1] init 0; // get travelling reward
  r3_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r3 : [0..TT];

  // tasks to track for ordering constraints
  at4_notify_2:[0..1];

  // travel captured as a reward
  [r3travel] r3_order=0 -> (r3_order'=1);
  // do sequence of tasks
  [Tat4_notify_2r3] r3_order=1 & r3_fail=0 & (r3_time+ r3at4_notify_2Time + 13 <=TT) -> (pr3_Succ_at4_notify): (r3_order'=2) & (r3_time'= r3_time+ r3at4_notify_2Time + 13) & (at4_notify_2'=1)+ (1-pr3_Succ_at4_notify): (r3_fail'=1) & (r3_order'=2) & (r3_time'= r3_time+ r3at4_notify_2Time + 13) & (at4_notify_2'=1);
  [Tr3at3_sanit_4] r3_order=2 & r3_fail=0 & at4_notify_2=1 & (r3_time+ r3at3_sanit_4Time + 0 <=TT) -> (pr3_Succ_at3_sanit): (r3_order'=3) & (r3_time'= r3_time+ r3at3_sanit_4Time + 0)+ (1-pr3_Succ_at3_sanit): (r3_fail'=1) & (r3_order'=3) & (r3_time'= r3_time+ r3at3_sanit_4Time + 0);
  [Tr3at2_floor_3] r3_order=3 & r3_fail=0 & at4_notify_2=1 & (r3_time+ r3at2_floor_3Time + 0 <=TT) -> (pr3_Succ_at2_floor): (r3_order'=4) & (r3_time'= r3_time+ r3at2_floor_3Time + 0)+ (1-pr3_Succ_at2_floor): (r3_fail'=1) & (r3_order'=4) & (r3_time'= r3_time+ r3at2_floor_3Time + 0);

  // failure and recovery, idle
  [ ] r3_fail=1 -> (r3_fail'=0); // fail
  [r3idle] r3_order!=4 & r3_fail=0 & (r3_time+1<=TT) & (i_r3<maxIdle) -> (i_r3'=i_r3+1) & (r3_time'=r3_time+1); // idle
endmodule

rewards "travel" 
 [r3travel] true: r3_travDist;
endrewards
rewards "idle" 
 [r3idle] true: 1;
endrewards

//total travel:
//13//