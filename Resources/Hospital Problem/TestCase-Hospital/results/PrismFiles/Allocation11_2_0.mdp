mdp

formula done = (r2_order=5 & r1_order=5);

// success
formula success = (r2_fail=0 & r1_fail=0 );

// total time available
const int TT=100;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r2at1_move_0Time=10;
const int r2at1_move_1Time=10;
const int r1at1_move_0Time=10;
const int r1at1_move_1Time=10;

// probabilities of succeeding with a task
const double pr2_Succ_at1_move = 0.9;
const double pr1_Succ_at1_move = 0.9;

// travelling costs of each robot
const int r2_travDist = 17; //l8->room1->room6
const int r1_travDist = 16; //l7->room1->room6


//---------- Robot r2 MODULE----------
module r2
  //r2_order=0: travel cost 
  //r2_order=1: time travel to join task at1_move_0
  //r2_order=2: join task at1_move_0
  //r2_order=3: time travel to join task at1_move_1
  //r2_order=4: join task at1_move_1
  r2_order: [0..5] init 0; // execution order
  r2_time:[0..TT] init 0; //time available
  r2_travel: [0..1] init 0; // get travelling reward
  r2_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r2 : [0..TT];

  // travel captured as a reward
  [r2travel] r2_order=0 -> (r2_order'=1);
  // do sequence of tasks
  [ ] r2_order=1 & r2_fail=0 & (r2_time+12<=TT) -> (pr2_Succ_at1_move): (r2_order'=2) & (r2_time'= r2_time+12)+ (1-pr2_Succ_at1_move): (r2_fail'=1) & (r2_order'=2) & (r2_time'= r2_time+12); // travel to join task at1_move_0
  [at1_move_0] r2_order=2 & r2_fail=0 & (r2_time+r2at1_move_0Time<=TT) & r2_time=r1_time -> (r2_order'=3) & (r2_time'= r2_time + r2at1_move_0Time);
  [ ] r2_order=3 & r2_fail=0 & (r2_time+5<=TT) -> (pr2_Succ_at1_move): (r2_order'=4) & (r2_time'= r2_time+5)+ (1-pr2_Succ_at1_move): (r2_fail'=1) & (r2_order'=4) & (r2_time'= r2_time+5); // travel to join task at1_move_1
  [at1_move_1] r2_order=4 & r2_fail=0 & (r2_time+r2at1_move_1Time<=TT) & r2_time=r1_time -> (r2_order'=5) & (r2_time'= r2_time + r2at1_move_1Time);

  // failure and recovery, idle
  [ ] r2_fail=1 -> (r2_fail'=0); // fail
  [r2idle] r2_order!=5 & r2_fail=0 & (r2_time+1<=TT) & (i_r2<maxIdle) -> (i_r2'=i_r2+1) & (r2_time'=r2_time+1); // idle
endmodule


//---------- Robot r1 MODULE----------
module r1
  //r1_order=0: travel cost 
  //r1_order=1: time travel to join task at1_move_0
  //r1_order=2: join task at1_move_0
  //r1_order=3: time travel to join task at1_move_1
  //r1_order=4: join task at1_move_1
  r1_order: [0..5] init 0; // execution order
  r1_time:[0..TT] init 0; //time available
  r1_travel: [0..1] init 0; // get travelling reward
  r1_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r1 : [0..TT];

  // travel captured as a reward
  [r1travel] r1_order=0 -> (r1_order'=1);
  // do sequence of tasks
  [ ] r1_order=1 & r1_fail=0 & (r1_time+11<=TT) -> (pr1_Succ_at1_move): (r1_order'=2) & (r1_time'= r1_time+11)+ (1-pr1_Succ_at1_move): (r1_fail'=1) & (r1_order'=2) & (r1_time'= r1_time+11); // travel to join task at1_move_0
  [at1_move_0] r1_order=2 & r1_fail=0 & (r1_time+r1at1_move_0Time<=TT) & r1_time=r2_time -> (r1_order'=3) & (r1_time'= r1_time + r1at1_move_0Time);
  [ ] r1_order=3 & r1_fail=0 & (r1_time+5<=TT) -> (pr1_Succ_at1_move): (r1_order'=4) & (r1_time'= r1_time+5)+ (1-pr1_Succ_at1_move): (r1_fail'=1) & (r1_order'=4) & (r1_time'= r1_time+5); // travel to join task at1_move_1
  [at1_move_1] r1_order=4 & r1_fail=0 & (r1_time+r1at1_move_1Time<=TT) & r1_time=r2_time -> (r1_order'=5) & (r1_time'= r1_time + r1at1_move_1Time);

  // failure and recovery, idle
  [ ] r1_fail=1 -> (r1_fail'=0); // fail
  [r1idle] r1_order!=5 & r1_fail=0 & (r1_time+1<=TT) & (i_r1<maxIdle) -> (i_r1'=i_r1+1) & (r1_time'=r1_time+1); // idle
endmodule

rewards "travel" 
 [r2travel] true: r2_travDist;
 [r1travel] true: r1_travDist;
endrewards
rewards "idle" 
 [r2idle] true: 1;
 [r1idle] true: 1;
endrewards

//total travel:
//33//