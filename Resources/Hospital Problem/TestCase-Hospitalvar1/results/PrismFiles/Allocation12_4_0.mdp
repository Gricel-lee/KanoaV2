mdp

formula done = (r2_order=6 & r1_order=8);

// success
formula success = (r2_fail=0 & r1_fail=0 );

// total time available
const int TT=150;

// maximum time for a robot to idle
const int maxIdle=30;

// completion tasks time
const int r2at4_notify_0Time=5;
const int r2at4_notify_6Time=5;
const int r2at4_notify_3Time=5;
const int r2at2_floor_1Time=7;
const int r2at3_sanit_2Time=5;
const int r1at4_notify_9Time=4;
const int r1at3_sanit_11Time=4;
const int r1at2_floor_10Time=5;
const int r1at2_floor_4Time=5;
const int r1at3_sanit_8Time=4;
const int r1at3_sanit_5Time=4;
const int r1at2_floor_7Time=5;

// probabilities of succeeding with a task
const double pr2_Succ_at4_notify = 0.85;
const double pr2_Succ_at2_floor = 0.85;
const double pr2_Succ_at3_sanit = 0.9;
const double pr1_Succ_at4_notify = 0.9;
const double pr1_Succ_at3_sanit = 0.9;
const double pr1_Succ_at2_floor = 0.9;

// travelling costs of each robot
const int r2_travDist = 12; //l8->room2->room4->room3->room2->room2
const int r1_travDist = 17; //l7->room5->room5->room5->room3->room4->room3->room4


//---------- Robot r2 MODULE----------
module r2
  //r2_order=0: travel cost 
  //r2_order=1: task at4_notify_0
  //r2_order=2: task at4_notify_6
  //r2_order=3: task at4_notify_3
  //r2_order=4: task at2_floor_1
  //r2_order=5: task at3_sanit_2
  r2_order: [0..6] init 0; // execution order
  r2_time:[0..TT] init 0; //time available
  r2_travel: [0..1] init 0; // get travelling reward
  r2_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r2 : [0..TT];

  // tasks to track for ordering constraints
  at4_notify_0:[0..1];
  at4_notify_6:[0..1];
  at4_notify_3:[0..1];

  // travel captured as a reward
  [r2travel] r2_order=0 -> (r2_order'=1);
  // do sequence of tasks
  [Tat4_notify_0r2] r2_order=1 & r2_fail=0 & (r2_time+ r2at4_notify_0Time + 6 <=TT) -> (pr2_Succ_at4_notify): (r2_order'=2) & (r2_time'= r2_time+ r2at4_notify_0Time + 6) & (at4_notify_0'=1)+ (1-pr2_Succ_at4_notify): (r2_fail'=1) & (r2_order'=2) & (r2_time'= r2_time+ r2at4_notify_0Time + 6) & (at4_notify_0'=1);
  [Tat4_notify_6r2] r2_order=2 & r2_fail=0 & (r2_time+ r2at4_notify_6Time + 2 <=TT) -> (pr2_Succ_at4_notify): (r2_order'=3) & (r2_time'= r2_time+ r2at4_notify_6Time + 2) & (at4_notify_6'=1)+ (1-pr2_Succ_at4_notify): (r2_fail'=1) & (r2_order'=3) & (r2_time'= r2_time+ r2at4_notify_6Time + 2) & (at4_notify_6'=1);
  [Tat4_notify_3r2] r2_order=3 & r2_fail=0 & (r2_time+ r2at4_notify_3Time + 2 <=TT) -> (pr2_Succ_at4_notify): (r2_order'=4) & (r2_time'= r2_time+ r2at4_notify_3Time + 2) & (at4_notify_3'=1)+ (1-pr2_Succ_at4_notify): (r2_fail'=1) & (r2_order'=4) & (r2_time'= r2_time+ r2at4_notify_3Time + 2) & (at4_notify_3'=1);
  [Tr2at2_floor_1] r2_order=4 & r2_fail=0 & at4_notify_0=1 & (r2_time+ r2at2_floor_1Time + 2 <=TT) -> (pr2_Succ_at2_floor): (r2_order'=5) & (r2_time'= r2_time+ r2at2_floor_1Time + 2)+ (1-pr2_Succ_at2_floor): (r2_fail'=1) & (r2_order'=5) & (r2_time'= r2_time+ r2at2_floor_1Time + 2);
  [Tr2at3_sanit_2] r2_order=5 & r2_fail=0 & at4_notify_0=1 & (r2_time+ r2at3_sanit_2Time + 0 <=TT) -> (pr2_Succ_at3_sanit): (r2_order'=6) & (r2_time'= r2_time+ r2at3_sanit_2Time + 0)+ (1-pr2_Succ_at3_sanit): (r2_fail'=1) & (r2_order'=6) & (r2_time'= r2_time+ r2at3_sanit_2Time + 0);

  // failure and recovery, idle
  [ ] r2_fail=1 -> (r2_fail'=0); // fail
  [r2idle] r2_order!=6 & r2_fail=0 & (r2_time+1<=TT) & (i_r2<maxIdle) -> (i_r2'=i_r2+1) & (r2_time'=r2_time+1); // idle
endmodule


//---------- Robot r1 MODULE----------
module r1
  //r1_order=0: travel cost 
  //r1_order=1: task at4_notify_9
  //r1_order=2: task at3_sanit_11
  //r1_order=3: task at2_floor_10
  //r1_order=4: task at2_floor_4
  //r1_order=5: task at3_sanit_8
  //r1_order=6: task at3_sanit_5
  //r1_order=7: task at2_floor_7
  r1_order: [0..8] init 0; // execution order
  r1_time:[0..TT] init 0; //time available
  r1_travel: [0..1] init 0; // get travelling reward
  r1_fail: [0..1] init 0; // failure detected
 // limit idle per robot
  i_r1 : [0..TT];

  // tasks to track for ordering constraints
  at4_notify_9:[0..1];

  // travel captured as a reward
  [r1travel] r1_order=0 -> (r1_order'=1);
  // do sequence of tasks
  [Tat4_notify_9r1] r1_order=1 & r1_fail=0 & (r1_time+ r1at4_notify_9Time + 9 <=TT) -> (pr1_Succ_at4_notify): (r1_order'=2) & (r1_time'= r1_time+ r1at4_notify_9Time + 9) & (at4_notify_9'=1)+ (1-pr1_Succ_at4_notify): (r1_fail'=1) & (r1_order'=2) & (r1_time'= r1_time+ r1at4_notify_9Time + 9) & (at4_notify_9'=1);
  [Tr1at3_sanit_11] r1_order=2 & r1_fail=0 & at4_notify_9=1 & (r1_time+ r1at3_sanit_11Time + 0 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=3) & (r1_time'= r1_time+ r1at3_sanit_11Time + 0)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=3) & (r1_time'= r1_time+ r1at3_sanit_11Time + 0);
  [Tr1at2_floor_10] r1_order=3 & r1_fail=0 & at4_notify_9=1 & (r1_time+ r1at2_floor_10Time + 0 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_10Time + 0)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=4) & (r1_time'= r1_time+ r1at2_floor_10Time + 0);
  [Tr1at2_floor_4] r1_order=4 & r1_fail=0 & at4_notify_3=1 & r1_time>=r2_time & (r1_time+ r1at2_floor_4Time + 2 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=5) & (r1_time'= r1_time+ r1at2_floor_4Time + 2)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=5) & (r1_time'= r1_time+ r1at2_floor_4Time + 2);
  [Tr1at3_sanit_8] r1_order=5 & r1_fail=0 & at4_notify_6=1 & r1_time>=r2_time & (r1_time+ r1at3_sanit_8Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=6) & (r1_time'= r1_time+ r1at3_sanit_8Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=6) & (r1_time'= r1_time+ r1at3_sanit_8Time + 2);
  [Tr1at3_sanit_5] r1_order=6 & r1_fail=0 & at4_notify_3=1 & r1_time>=r2_time & (r1_time+ r1at3_sanit_5Time + 2 <=TT) -> (pr1_Succ_at3_sanit): (r1_order'=7) & (r1_time'= r1_time+ r1at3_sanit_5Time + 2)+ (1-pr1_Succ_at3_sanit): (r1_fail'=1) & (r1_order'=7) & (r1_time'= r1_time+ r1at3_sanit_5Time + 2);
  [Tr1at2_floor_7] r1_order=7 & r1_fail=0 & at4_notify_6=1 & r1_time>=r2_time & (r1_time+ r1at2_floor_7Time + 2 <=TT) -> (pr1_Succ_at2_floor): (r1_order'=8) & (r1_time'= r1_time+ r1at2_floor_7Time + 2)+ (1-pr1_Succ_at2_floor): (r1_fail'=1) & (r1_order'=8) & (r1_time'= r1_time+ r1at2_floor_7Time + 2);

  // failure and recovery, idle
  [ ] r1_fail=1 -> (r1_fail'=0); // fail
  [r1idle] r1_order!=8 & r1_fail=0 & (r1_time+1<=TT) & (i_r1<maxIdle) -> (i_r1'=i_r1+1) & (r1_time'=r1_time+1); // idle
endmodule

rewards "travel" 
 [r2travel] true: r2_travDist;
 [r1travel] true: r1_travDist;
endrewards
rewards "idle" 
 [r2idle] true: 1;
 [r1idle] true: 1;
endrewards

//total travel:
//29//