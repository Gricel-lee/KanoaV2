// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals


import "http://www.example.org/dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ProblemSpecification returns ProblemSpecification:
	'ProblemSpecification'
	'{'
		'WorldModel' ':' worldModel+=WorldModel ( "," worldModel+=WorldModel)* 
		//'robotsModel' '{' robotsModel+=RobotsModel ( "," robotsModel+=RobotsModel)* '}' 
		//'tasksModel' '{' tasksModel+=TasksModel ( "," tasksModel+=TasksModel)* '}' 
		//'mission' '{' mission+=Mission ( "," mission+=Mission)* '}' 
	'}';

/// --------- World model
WorldModel returns WorldModel:
	Location | Paths;

Location returns Location:
	{Location}
	name=EString ':'
	'('
		'x' x=EDouble
		'y' y=EDouble
		(',' 'describes' description=EString)?
	')';

Paths returns Paths:
	{Paths}
		'distance'
		loc1=[Location|EString] 'to'
		loc2=[Location|EString]
		'is' distance=EDouble
		
	;
	
/// --------- Tasks
TasksModel returns TasksModel:
	AtomicTask | CompoundTask;

AtomicTask returns AtomicTask:
	{AtomicTask}
	atID=EString ':'
	robots=EInt 'robots' 'needed' 
	'at' 'location'
	loc=[Location|EString]
	
	;

CompoundTask returns CompoundTask:
	{CompoundTask}
	ctID=EString ':'
	'subtasks'
	'['
		('loc' loc=[Location|EString])?
		('canDoTask' '(' canDoTask+=[TasksModel|EString] ( "," canDoTask+=[TasksModel|EString])* ')' )?
	']'
	
	('constraint:' ordered?='ordered' | 'constraint:' consecutive?='consecutive')?
	;

/// ----------- Robots
	
Mission returns Mission:
	Mission_Impl | MissionTask | Constraints_Impl | CompTaskAllLoc | SpaceXYRobot | SpaceXYAll | TaskTime | Closest | MaxTasks | NumAllocations | NumPopulation | NumEvaluations | Objective;



RobotsModel returns RobotsModel:
	'RobotsModel'
	'{'
		'robots' '(' robots+=[Robot|EString] ( "," robots+=[Robot|EString])* ')' 
	'}';


Mission_Impl returns Mission:
	{Mission}
	'Mission'
	'{'
		('description' description=EString)?
	'}';



EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Robot returns Robot:
	'Robot'
	robID=EString
	'{'
		('description' description=EString)?
		'velocity' velocity=EDouble
		'initLoc' initLoc=[Location|EString]
		'capabilities' '{' capabilities+=Capability ( "," capabilities+=Capability)* '}' 
	'}';

Capability returns Capability:
	'Capability'
	name=EString
	'{'
		('description' description=EString)?
		('time' time=EDouble)?
		('success' success=EDouble)?
		'at' '(' at+=[AtomicTask|EString] ( "," at+=[AtomicTask|EString])* ')' 
	'}';



EBoolean returns ecore::EBoolean:
	'true' | 'false';

MissionTask returns MissionTask:
	{MissionTask}
	'MissionTask'
	mtID=EString
	'{'
		('description' description=EString)?
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('loc' loc=[Location|EString])?
	'}';

Constraints_Impl returns Constraints:
	{Constraints}
	'Constraints'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
	'}';

CompTaskAllLoc returns CompTaskAllLoc:
	'CompTaskAllLoc'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'ct' ct=[CompoundTask|EString]
		('loc' loc=[Location|EString])?
	'}';

SpaceXYRobot returns SpaceXYRobot:
	'SpaceXYRobot'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'coordinate' coordinate=XY
		'lowerGreater' lowerGreater=LowerGreater
		'val' val=EDouble
		'robot' robot=[Robot|EString]
	'}';

SpaceXYAll returns SpaceXYAll:
	'SpaceXYAll'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'coordinate' coordinate=XY
		'lowerGreater' lowerGreater=LowerGreater
		'val' val=EDouble
	'}';

TaskTime returns TaskTime:
	'TaskTime'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'startEnd' startEnd=StartEnd
		'time' time=EDouble
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('mt' mt=[MissionTask|EString])?
	'}';

Closest returns Closest:
	{Closest}
	'Closest'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		('all' all=EString)?
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('mt' mt=[MissionTask|EString])?
	'}';

MaxTasks returns MaxTasks:
	'MaxTasks'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		('all' all=EString)?
		'num' num=EInt
		('robot' robot=[Robot|EString])?
	'}';

NumAllocations returns NumAllocations:
	'NumAllocations'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'number' number=EInt
	'}';

NumPopulation returns NumPopulation:
	'NumPopulation'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'number' number=EInt
	'}';

NumEvaluations returns NumEvaluations:
	'NumEvaluations'
	'{'
		('description' description=EString)?
		('rateSucc' rateSucc=EDouble)?
		'number' number=EInt
	'}';

Objective returns Objective:
	'Objective'
	'{'
		('description' description=EString)?
		'type' '{' type+=ObjType ( "," type+=ObjType)* '}' 
	'}';

enum XY returns XY:
				x = 'x' | y = 'y';

enum LowerGreater returns LowerGreater:
				lower = 'lower' | greater = 'greater';

enum StartEnd returns StartEnd:
				end = 'end' | start = 'start';

EInt returns ecore::EInt:
	'-'? INT;

enum ObjType returns ObjType:
				minIdle = 'minIdle' | minTravel = 'minTravel' | maxSucc = 'maxSucc';
