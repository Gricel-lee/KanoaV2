// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals


import "http://www.example.org/dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ProblemSpecification returns ProblemSpecification:
	'ProblemSpecification'
	'{'
		'WorldModel' ':' worldModel+=WorldModel ( "," worldModel+=WorldModel)* 
		'TasksModel' ':' tasksModel+=TasksModel ( "," tasksModel+=TasksModel)*
		'RobotsModel' ':' robotsModel+=Robot ( "," robotsModel+=Robot)*
		'Mission' '{' mission+=Mission ( "," mission+=Mission)* '}' 
	'}';

/// --------- World model
WorldModel returns WorldModel:
	Location | Paths;

Location returns Location:
	{Location}
	name=EString ':'
	'('
		'x' x=EDouble
		'y' y=EDouble
		(',' 'describes' description=EString)?
	')';

Paths returns Paths:
	{Paths}
		'distance'
		loc1=[Location|EString] 'to'
		loc2=[Location|EString]
		'is' distance=EDouble
		
	;
	
/// --------- Tasks
TasksModel returns TasksModel:
	AtomicTask | CompoundTask;

AtomicTask returns AtomicTask:
	{AtomicTask}
	atID=EString ':'
	robots=EInt 'robots' 'needed' 
	'at' 'location'
	loc=[Location|EString]
	
	;

CompoundTask returns CompoundTask:
	{CompoundTask}
	ctID=EString ':'
	'subtasks'
	'['
		('loc' loc=[Location|EString])?
		('canDoTask' '(' canDoTask+=[TasksModel|EString] ( "," canDoTask+=[TasksModel|EString])* ')' )?
	']'
	
	('constraint:' ordered?='ordered' | 'constraint:' consecutive?='consecutive')?
	;

/// ----------- Robots
	
Robot returns Robot:
	{Robot}
	robID=EString
	':'
		'at''initial''position' initLoc=[Location|EString]
		'has''velocity' velocity=EDouble
		'with''capabilities' 
		'('
			capabilities+=Capability ( "," capabilities+=Capability)*
		')'
		 
	'}';


Capability returns Capability:
	{Capability}
	at=[AtomicTask|EString] 
	'-required''time:' time=EDouble
	',''success''rate:' success=EDouble
	;
	

	
/// ----------- Missions	

Mission returns Mission:
	missionTask+=[MissionTask|EString] ( "," missionTask+=[MissionTask|EString])* 
	'objectives:'
		objectives+=Objective ( "," objectives+=Objective)*
		//objectives+=Objective ( "," objectives+=Objective)* ;	
	('constraints:'
		constraints+=[Constraints|EString] ( "," constraints+=[Constraints|EString])* )?
	('parameters:'
		','? (time = EInt )?
		','? (numAlloc = EInt)?
		','? (population = EInt)?
		','? (evaluations = EInt)?
	)?
	;	
	
MissionTask returns MissionTask:
	{MissionTask}
	mtID=EString ':'
	('atomic''task:' at=[AtomicTask|EString] | 'compound''task:' ct=[CompoundTask|EString])
	('at''location' loc=[Location|EString])?
	;

Constraints returns Constraints:
	RateSucc | SpaceXYRobot | TaskTime | AllocateT | Closest | MaxTasks | CompTaskAllLoc ;

RateSucc returns Constraints:
	{RateSucc}
	('rate''of''success''greater''than' rateSucc=EDouble)?
	;

SpaceXYRobot returns SpaceXYRobot:
	('robot' robot=[Robot|EString] | allrobots='all''robots' )
	'work''in' coordinate=XY
	lowerGreater=LowerGreater 'than' val=EDouble
		
	'}';
	
TaskTime returns TaskTime:
	'task'
	(at=[AtomicTask|EString]
	| ct=[CompoundTask|EString]
	| mt=[MissionTask|EString])?
	'with'startEnd=StartEnd
	'time:' time=EDouble	
	;

AllocateT returns AllocateT:
	{AllocateT}
	'allocate''task'
	(at=[AtomicTask|EString]
	| ct=[CompoundTask|EString]
	| mt=[MissionTask|EString])?
	'to''robot' robot=[Robot|EString]
;

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;



EInt returns ecore::EInt:
	'-'? INT;



EBoolean returns ecore::EBoolean:
	'true' | 'false';




	

CompTaskAllLoc returns CompTaskAllLoc:
	'CompTaskAllLoc'
	'{'
		'ct' ct=[CompoundTask|EString]
		('loc' loc=[Location|EString])?
	'}';




Closest returns Closest:
	{Closest}
	'allocate'
		(all='all''tasks' |
		at=[AtomicTask|EString] |
		ct=[CompoundTask|EString] |
		mt=[MissionTask|EString])?
	'to''closest''robot'
	;

MaxTasks returns MaxTasks:
	{MaxTasks}
	'limit''max''number''of''tasks'
	(all='per''robot' | 'in''robot'robot=[Robot|EString])?
	'to' num=EInt
	;



//objectives
enum Objective returns Objective:
				minIdle = 'minimise idle' | minTravel = 'minimise travel' | maxSucc = 'maximise success';
//Others
enum XY returns XY:
				x = 'x' | y = 'y';

enum LowerGreater returns LowerGreater:
				lower = 'lower' | greater = 'greater';

enum StartEnd returns StartEnd:
				end = 'end' | start = 'start';

