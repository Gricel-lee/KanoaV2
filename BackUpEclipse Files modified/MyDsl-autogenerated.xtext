// automatically generated by Xtext
grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ProblemSpecification returns ProblemSpecification:
	'ProblemSpecification'
	'{'
		'worldModel' '{' worldModel+=WorldModel ( "," worldModel+=WorldModel)* '}' 
		'robotsModel' '{' robotsModel+=Robot ( "," robotsModel+=Robot)* '}' 
		'tasksModel' '{' tasksModel+=TasksModel ( "," tasksModel+=TasksModel)* '}' 
		'mission' '{' mission+=Mission ( "," mission+=Mission)* '}' 
	'}';

WorldModel returns WorldModel:
	Location | Paths;


TasksModel returns TasksModel:
	TasksModel_Impl | AtomicTask | CompoundTask;





Constraints returns Constraints:
	Constraints_Impl | RateSucc | CompTaskAllLoc | SpaceXYRobot | TaskTime | AllocateT | Closest | MaxTasks;



WorldModel_Impl returns WorldModel:
	{WorldModel}
	'WorldModel'
	;

Robot returns Robot:
	'Robot'
	robID=EString
	'{'
		'velocity' velocity=EDouble
		'initLoc' initLoc=[Location|EString]
		'capabilities' '{' capabilities+=Capability ( "," capabilities+=Capability)* '}' 
	'}';

TasksModel_Impl returns TasksModel:
	{TasksModel}
	'TasksModel'
	;

Mission returns Mission:
	'Mission'
	'{'
		('time' time=EInt)?
		('numAlloc' numAlloc=EInt)?
		('population' population=EInt)?
		('evaluations' evaluations=EInt)?
		('obj' '{' obj+=Objective ( "," obj+=Objective)* '}' )?
		'missionTask' '(' missionTask+=[MissionTask|EString] ( "," missionTask+=[MissionTask|EString])* ')' 
		('constraints' '(' constraints+=[Constraints|EString] ( "," constraints+=[Constraints|EString])* ')' )?
	'}';

Location returns Location:
	'Location'
	name=EString
	'{'
		'x' x=EDouble
		'y' y=EDouble
		('description' description=EString)?
	'}';

Paths returns Paths:
	'Paths'
	'{'
		'distance' distance=EDouble
		'loc1' loc1=[Location|EString]
		'loc2' loc2=[Location|EString]
	'}';

EString returns ecore::EString:
	STRING | ID;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Capability returns Capability:
	'Capability'
	'{'
		'time' time=EDouble
		'success' success=EDouble
		'at' at=[AtomicTask|EString]
	'}';

AtomicTask returns AtomicTask:
	'AtomicTask'
	atID=EString
	'{'
		('robots' robots=EInt)?
		'loc' loc=[Location|EString]
	'}';

EInt returns ecore::EInt:
	'-'? INT;

CompoundTask returns CompoundTask:
	ordered?='ordered'
	consecutive?='consecutive'
	'CompoundTask'
	ctID=EString
	'{'
		('loc' loc=[Location|EString])?
		('canDoTask' '(' canDoTask+=[TasksModel|EString] ( "," canDoTask+=[TasksModel|EString])* ')' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

MissionTask returns MissionTask:
	{MissionTask}
	'MissionTask'
	mtID=EString
	'{'
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('loc' loc=[Location|EString])?
	'}';

Constraints_Impl returns Constraints:
	{Constraints}
	'Constraints'
	;

enum Objective returns Objective:
				minIdle = 'minIdle' | minTravel = 'minTravel' | maxSucc = 'maxSucc';

RateSucc returns RateSucc:
	{RateSucc}
	'RateSucc'
	'{'
		('rateSucc' rateSucc=EDouble)?
	'}';

CompTaskAllLoc returns CompTaskAllLoc:
	'CompTaskAllLoc'
	'{'
		'ct' ct=[CompoundTask|EString]
		('loc' loc=[Location|EString])?
	'}';

SpaceXYRobot returns SpaceXYRobot:
	'SpaceXYRobot'
	'{'
		'coordinate' coordinate=XY
		'lowerGreater' lowerGreater=LowerGreater
		'val' val=EDouble
		('allrobots' allrobots=EString)?
		('robot' robot=[Robot|EString])?
	'}';

TaskTime returns TaskTime:
	'TaskTime'
	'{'
		'startEnd' startEnd=StartEnd
		'time' time=EDouble
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('mt' mt=[MissionTask|EString])?
	'}';

AllocateT returns AllocateT:
	'AllocateT'
	'{'
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('mt' mt=[MissionTask|EString])?
		'robot' robot=[Robot|EString]
	'}';

Closest returns Closest:
	{Closest}
	'Closest'
	'{'
		('all' all=EString)?
		('at' at=[AtomicTask|EString])?
		('ct' ct=[CompoundTask|EString])?
		('mt' mt=[MissionTask|EString])?
	'}';

MaxTasks returns MaxTasks:
	'MaxTasks'
	'{'
		('all' all=EString)?
		'num' num=EInt
		('robot' robot=[Robot|EString])?
	'}';

enum XY returns XY:
				x = 'x' | y = 'y';

enum LowerGreater returns LowerGreater:
				lower = 'lower' | greater = 'greater';

enum StartEnd returns StartEnd:
				end = 'end' | start = 'start';
